import{_ as s,c as a,o as n,a as e}from"./app.27c4e244.js";const h=JSON.parse('{"title":"开发必读 🛸","description":"","frontmatter":{},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"开发思想","slug":"开发思想","link":"#开发思想","children":[]},{"level":2,"title":"目录结构","slug":"目录结构","link":"#目录结构","children":[]},{"level":2,"title":"Packages","slug":"packages","link":"#packages","children":[]},{"level":2,"title":"关于 Pnpm 使用","slug":"关于-pnpm-使用","link":"#关于-pnpm-使用","children":[]},{"level":2,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]}],"relativePath":"docs/tutorials/catalogue.md"}'),p={name:"docs/tutorials/catalogue.md"},l=e(`<h1 id="开发必读" tabindex="-1">开发必读 🛸 <a class="header-anchor" href="#开发必读" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">重要提示 🌈</p><p>请仔细阅读本页内容，将有效帮助你了解 ET 前端项目的架构。</p></div><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-hidden="true">#</a></h2><p>为了统一公司所有前端项目的输出口，规范前端代码编写，减少不必要的组件重复开发。特选择 pnpm 做为底座，将项目进行 Monorepo 管理。</p><h2 id="开发思想" tabindex="-1">开发思想 <a class="header-anchor" href="#开发思想" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">🌈</p><p>做为 Monorepo 架构的设计，大家必须有一个思想就是 <code>一切皆模块</code>。 这也是脱离初级程序猿的必经之路，项目里各种 <code>import , export</code> 做到<code>高聚合与低耦合</code>。一个组件拆分能力也是考验自己的能力体现。</p><p>在这里，其实没有所谓的项目，只有所谓的模块（页面，组件）。<code>一切皆组件</code>一个项目的落地，无非是前端无数个组件拼接而成，自上而下的。 A 项目 引用 B 项目的 组件是常见的事儿。</p><p>所以在这里，除非使用了 @alien 内的组件或工具，本项目使用到的工具或者引用，不建议使用 @ 快捷符 改为 &#39;../../../&#39; 类型</p></div><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-hidden="true">#</a></h2><p>这里罗列了 ET 架构中的目录结构，在项目开发中，请遵照这个目录结构组织代码。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .husky</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .vscode</span></span>
<span class="line"><span style="color:#A6ACCD;">├── Alien</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── compoents （各种分装好的组件）</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── hooks     （各种hooks方式）</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── layout    （布局组件）</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── public    （静态文件）</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── theme     （里面是修改antd,或者第三方的css）</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── types     （一些公用的ts类型）</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── utils     （很多工具函数）</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── end.d.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── tsconfig.json</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── vite-env.d.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">├── packages （存放项目的位置）</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── xxxxx (项目)</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── yyyyy (项目)</span></span>
<span class="line"><span style="color:#A6ACCD;">├── start</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── controller</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── getPackList.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   └── interactive.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── build.js</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .gitignore</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .prettierignore</span></span>
<span class="line"><span style="color:#A6ACCD;">├── .prettierrc.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── commitlint.config.js</span></span>
<span class="line"><span style="color:#A6ACCD;">├── package.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── pnpm-lock.yaml</span></span>
<span class="line"><span style="color:#A6ACCD;">├── pnpm-workspace.yaml README.md</span></span>
<span class="line"><span style="color:#A6ACCD;">└── README.md</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="packages" tabindex="-1">Packages <a class="header-anchor" href="#packages" aria-hidden="true">#</a></h2><p>🚚 这个架构使用了 pnpm 的 Monorepo 项目管理，于是将所有的项目放到 <code>packages</code> 目录下，在你使用 <code>pnpmstart</code>时，会自动读取你所有的项目，供你选择。</p><h2 id="关于-pnpm-使用" tabindex="-1">关于 Pnpm 使用 <a class="header-anchor" href="#关于-pnpm-使用" aria-hidden="true">#</a></h2><blockquote><p>详细内容请学习 <a href="https://www.pnpm.cn/" target="_blank" rel="noreferrer">pnpm</a> 相关知识</p></blockquote><p>1: 安装 pnpm install 安装全部项目的所有依赖</p><p>2: 安装全部项目共有依赖 pnpm add xxxx -w</p><p>3: 针对某个项目去安装 pnpm --filter(-F) <code>&lt;package_selector&gt; &lt;command&gt;</code></p><p>4：卸载依赖 pnpm remove -F xxxx / pnpm remove xxxx -w</p><p>5: 公用内容与组件等：需要在 Alien 中创建，如过需要创建新的模块，需要在对应的文件夹下面创建 package.json。<code>特别注意其中的 name:@alien/xxxx</code>，如果是packages中项目的话，package.json <code>name: @app/xxx</code></p><p>6：内部自己引用 当前项目中的 package.json 内 dependencies 下 新增 &quot;@alien/components（这里的名称与对应的 package 中的 name 字段相同）&quot;: &quot;workspace:*&quot; 。 然后运行 pnpm -F xxx install</p><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-hidden="true">#</a></h2><p>⛲ 如果你的项目中有不同的.env 文件，在你选择好项目后，会让你选择你要使用的 env 文件,并读取里面的变量。</p><p>⛩️ 你的 .env 文件可以有多个，每个文件对应没个环境。通常会有<code>.env.development</code>、<code>.env.production</code> 两个文件。</p><p>🚆 如果有公用的变量，可以新建一个 <code>.env</code>文件，这个文件内的环境变量级别是最低的，在任何环境下都会加载，如果有在.env.xxxx 下有相同的，取 xxx 内的变量值。</p><p>💈 注意所有的变量都按照 <code>VITE_APP_XXXX=yyyy</code> 格式使用。</p><p>🍾 在项目中使用如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Demo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xxxx</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div>`,26),o=[l];function c(t,r,i,d,A,C){return n(),a("div",null,o)}const D=s(p,[["render",c]]);export{h as __pageData,D as default};
